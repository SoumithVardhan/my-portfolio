import { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LazyImage = ({ src, alt, className, style, placeholder = '/api/placeholder/400/250' }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const imgRef = useRef();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n  };\n\n  return (\n    <div \n      ref={imgRef} \n      className={`lazy-image-container ${className || ''}`}\n      style={style}\n    >\n      {!isInView ? (\n        <div className=\"placeholder-shimmer\" style={{ aspectRatio: '3/2' }} />\n      ) : (\n        <>\n          {!isLoaded && (\n            <div className=\"placeholder-shimmer\" style={{ aspectRatio: '3/2' }} />\n          )}\n          <img\n            src={src}\n            alt={alt}\n            loading=\"lazy\"\n            decoding=\"async\"\n            style={{\n              opacity: isLoaded ? 1 : 0,\n              transition: 'opacity 0.3s ease',\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover'\n            }}\n            onLoad={handleLoad}\n            onError={() => setIsLoaded(true)} // Show even if error\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nLazyImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  placeholder: PropTypes.string\n};\n\nexport default LazyImage;\n